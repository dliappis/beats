#!/usr/bin/env bash

set -euo pipefail

# CI_GCP_OBS_PATH="kv/ci-shared/observability-ingest/cloud/gcp"
PRIVATE_CI_GCS_CREDENTIALS_PATH="kv/ci-shared/platform-ingest/gcp-platform-ingest-ci-service-account"
WORKSPACE="$(pwd)"

google_cloud_auth() {
  local secretFileLocation
  secretFileLocation=$(mktemp -d -p "${WORKSPACE}" -t "tmp.beats.XXXXXXXXX")/google-cloud-credentials.json
  echo "${PRIVATE_CI_GCS_CREDENTIALS_SECRET}" > ${secretFileLocation}
  #gcloud auth activate-service-account --key-file ${secretFileLocation} 2> /dev/null
  export GOOGLE_APPLICATION_CREDENTIALS=${secretFileLocation}
}

retry() {
  local retries=$1
  shift
  local count=0
  until "$@"; do
    exit=$?
    wait=$((2 ** count))
    count=$((count + 1))
    if [ $count -lt "$retries" ]; then
      >&2 echo "Retry $count/$retries exited $exit, retrying in $wait seconds..."
      sleep $wait
    else
      >&2 echo "Retry $count/$retries exited $exit, no more retries left."
      return $exit
    fi
  done
  return 0
}

if [[ "$BUILDKITE_PIPELINE_SLUG" == "filebeat" || "$BUILDKITE_PIPELINE_SLUG" == "auditbeat" || "$BUILDKITE_PIPELINE_SLUG" == "heartbeat" ]]; then
  source .buildkite/env-scripts/env.sh
  source .buildkite/env-scripts/util.sh
  source .buildkite/env-scripts/win-env.sh

  if [[ -z "${GOLANG_VERSION-""}" ]]; then
    export GOLANG_VERSION=$(cat "${WORKSPACE}/.go-version")
  fi
fi

if [[ "$BUILDKITE_PIPELINE_SLUG" == "beats-metricbeat" || "$BUILDKITE_PIPELINE_SLUG" == "beats-libbeat" || "$BUILDKITE_PIPELINE_SLUG" == "beats-packetbeat" || "$BUILDKITE_PIPELINE_SLUG" == "beats-winlogbeat" || "$BUILDKITE_PIPELINE_SLUG" == "beats-xpack-libbeat" || "$BUILDKITE_PIPELINE_SLUG" == "beats-xpack-metricbeat" || "$BUILDKITE_PIPELINE_SLUG" == "beats-xpack-packetbeat" ]]; then
  source .buildkite/scripts/setenv.sh
  if [[ "${BUILDKITE_COMMAND}" =~ ^buildkite-agent ]]; then
    echo "Skipped pre-command when running the Upload pipeline"
    exit 0
  fi
fi

# if [[ "$BUILDKITE_PIPELINE_SLUG" == "beats-xpack-packetbeat" ]]; then
#   # Set GCP credentials
#   GOOGLE_APPLICATION_GCP_SECRET=$(retry 5 vault kv get -format=json -field=data ${CI_GCP_OBS_PATH})
#   echo "${GOOGLE_APPLICATION_GCP_SECRET}" > ./gcp.json
#   export GOOGLE_APPLICATION_CREDENTIALS=$(realpath ./gcp.json)
# fi


if [[ "$BUILDKITE_PIPELINE_SLUG" == "beats-xpack-packetbeat" ]]; then
  if [[ "$BUILDKITE_STEP_KEY" == "kibana-discover" || "$BUILDKITE_STEP_KEY" == "refresh-k8s-tmpls" || "$BUILDKITE_STEP_KEY" =~ ^sync-bundled-packages ]]; then
  # Set GCP credentials
  PRIVATE_CI_GCS_CREDENTIALS_SECRET=$(retry 5 vault kv get -field plaintext -format=json ${PRIVATE_CI_GCS_CREDENTIALS_PATH})
  export PRIVATE_CI_GCS_CREDENTIALS_SECRET
  google_cloud_auth
fi
